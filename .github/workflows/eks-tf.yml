name: "Terraform CI/CD Workflow"

on:
  # Trigger on pull request creation or updates
  pull_request:
    paths:
      - "eks-cluster/**" # Trigger only for changes in the eks-cluster folder

  push:
    paths:
      - "eks-cluster/**"

  # Manual invocation with workflow_dispatch
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

jobs:
  # Job for pull request validation
  validate:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.HCP_API_TOKEN }}

      - name: Clean Terraform Directory
        working-directory: ./eks-cluster
        run: rm -rf .terraform .terraform.lock.hcl

      - name: Terraform Init
        working-directory: ./eks-cluster
        run: terraform init

      - name: Terraform Validate
        working-directory: ./eks-cluster
        run: terraform validate

  # Job for manual invocation (plan, apply, or destroy)
  eks-cluster-deployment:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      cluster-outputs: ${{ steps.get-outputs.outputs.outputs }}
      action: ${{ github.event.inputs.action }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.HCP_API_TOKEN }}

      - name: Initialize Terraform
        working-directory: ./eks-cluster
        run: terraform init

      - name: Run Terraform Action
        id: deploy-cluster
        working-directory: ./eks-cluster
        env:
          TF_CLI_ARGS_plan: "-input=false -var-file=variables.tfvars"
          TF_CLI_ARGS_apply: "-input=false -auto-approve"
          TF_CLI_ARGS_destroy: "-input=false -auto-approve"
        run: |
          case "${{ github.event.inputs.action }}" in
            plan)
              terraform plan
              ;;
            apply)
              terraform apply
              ;;
            destroy)
              terraform destroy
              ;;
            *)
              echo "Invalid action. Please choose plan, apply, or destroy."
              exit 1
              ;;
          esac

      - name: Capture Terraform Outputs
        id: get-outputs
        working-directory: ./eks-cluster
        run: terraform output -json | awk 'NR>1' > eks-deployment-outputs.json

      - name: Verify Terraform Outputs
        run: cat ./eks-cluster/eks-deployment-outputs.json

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs
          path: ./eks-cluster/eks-deployment-outputs.json

  # Job to deploy ingress after successful cluster deployment
  deploy-ingress:
    needs: eks-cluster-deployment
    runs-on: ubuntu-latest
    if: ${{ needs.eks-cluster-deployment.outputs.action == 'apply' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs
          path: ./eks-cluster

      - name: Parse Terraform Outputs
        id: parse-outputs
        run: |
          echo "Retrieving Terraform outputs"
          echo "CLUSTER_ENDPOINT=$(jq -r '.cluster_endpoint.value' < ./eks-cluster/eks-deployment-outputs.json)" >> $GITHUB_ENV
          echo "CLUSTER_SECURITY_GROUP_ID=$(jq -r '.cluster_security_group_id.value' < ./eks-cluster/eks-deployment-outputs.json)" >> $GITHUB_ENV
          echo "REGION=$(jq -r '.region.value' < ./eks-cluster/eks-deployment-outputs.json)" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$(jq -r '.cluster_name.value' < ./eks-cluster/eks-deployment-outputs.json)" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      # Verify AWS CLI
      - name: Verify AWS CLI
        run: aws sts get-caller-identity

      - name: Configure kubectl
        run: |
          aws eks --region $REGION update-kubeconfig --name $CLUSTER_NAME

      - name: Install AWS Load Balancer Controller
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update
          helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=$CLUSTER_NAME \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set region=$REGION \
            --set vpcId=$CLUSTER_SECURITY_GROUP_ID \
            --set ingressClass=alb

      - name: Deploy Ingress Resources
        working-directory: ./eks-cluster
        run: kubectl apply -f ingress.yml
